"use strict";

var _model = _interopRequireDefault(require("./model"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const index = async (req, res) => {
  let data = await _model.default.find();
  res.json({
    results: data.length,
    data
  });
};

const store = async (req, res) => {
  req.body.author = req.user._id;
  let query = new _model.default(req.body);
  let article = await query.save();
  res.json(article);
};

const show = async (req, res) => {
  article = await _model.default.find();
  res.json(article); // res.json({
  //     dd: 45,
  // })
};

const destroy = async (req, res) => {
  let article = await req.article.delete();
  res.json({
    message: 'Article deleted successfully',
    article
  });
};

const update = async (req, res) => {
  // let article = await req.article.updateOne(req.body, { new: true })
  let article = await _model.default.findByIdAndUpdate(req.params.id, req.body, {
    new: true
  });
  res.json({
    message: 'Article updated successfully',
    article
  });
};

module.exports = {
  index,
  store,
  show,
  destroy,
  update
};
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _mongoose = require("mongoose");

var _mongooseUniqueValidator = _interopRequireDefault(require("mongoose-unique-validator"));

var _validator = _interopRequireDefault(require("validator"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const SchemaDefinition = new _mongoose.Schema({
  title: {
    type: String,
    trim: true,
    required: [true, 'Title is required'],
    minlength: [15, 'Title should atleast 15 characters']
  },
  slug: {
    type: String,
    trim: true
  },
  tags: {
    type: [String],
    trim: true,
    required: [true, 'Tags is required']
  },
  coverImage: {
    type: String,
    trim: true,
    validate: [_validator.default.isURL, 'Invalid url']
  },
  body: {
    type: String,
    trim: true
  },
  isAnonymous: {
    type: Boolean,
    default: false
  },
  isPublished: {
    type: Boolean,
    default: true
  },
  author: {
    type: _mongoose.Schema.ObjectId,
    ref: 'User'
  }
}, {
  toJSON: {
    virtuals: true
  },
  toObject: {
    virtuals: true
  },
  timestamps: true
});

const slug = text => text.replace(/[#$%&'()*+,-./:;<=>?@[\]^_`{|}~]/g, '').split(' ').join('-') + '-' + Date.now();

SchemaDefinition.pre('save', function (next) {
  this.slug = slug(this.title);
  this.tags = this.tags[0].split(',');
  next();
});
SchemaDefinition.pre(/^find/, function (next) {
  this.populate({
    path: 'author',
    select: '-password'
  });
  next();
}); // todo

SchemaDefinition.virtual('excerpt').get(function () {
  var _this$body;

  return ((_this$body = this.body) === null || _this$body === void 0 ? void 0 : _this$body.slice(0, 50)) + '...';
});
SchemaDefinition.virtual('isEdited').get(function () {
  return this.createdAt != this.updatedAt;
});
SchemaDefinition.virtual('comments', {
  ref: 'Comment',
  foreignField: 'article',
  localField: '_id'
});
SchemaDefinition.plugin(_mongooseUniqueValidator.default);

var _default = (0, _mongoose.model)('Article', SchemaDefinition);

exports.default = _default;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _express = require("express");

var _catchErrors = _interopRequireDefault(require("../../utils/catchErrors"));

var _isAuthenticated = _interopRequireDefault(require("../../middlewares/isAuthenticated"));

var _AppError = _interopRequireDefault(require("../../utils/AppError"));

var _model = _interopRequireDefault(require("./model"));

var _controller = require("./controller");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const router = (0, _express.Router)();

const thisIsMyArticle = async (req, res, next) => {
  let article = await _model.default.findById(req.params.id);

  if (!article) {
    throw new _AppError.default('আরটিক্যাল খুজে পাওয়া যায়নি', 404);
  } // if (JSON.stringify(article.author) != JSON.stringify(req.user._id)) {
  //     throw new AppError('এই আরটিক্যালটি আপনার নয়', 401)
  // }


  req.article = article;
  next();
};

router.route('/').get((0, _catchErrors.default)(_controller.index)).post((0, _catchErrors.default)(_isAuthenticated.default), (0, _catchErrors.default)(_controller.store));
router.route('/:id').get((0, _catchErrors.default)(_controller.show)).put((0, _catchErrors.default)(_isAuthenticated.default), (0, _catchErrors.default)(thisIsMyArticle), (0, _catchErrors.default)(_controller.update)).delete((0, _catchErrors.default)(_isAuthenticated.default), (0, _catchErrors.default)(thisIsMyArticle), (0, _catchErrors.default)(_controller.destroy));
var _default = router;
exports.default = _default;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.destroy = exports.update = exports.store = void 0;

var _model = _interopRequireDefault(require("./model"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const store = async (req, res) => {
  // req.body.author = req.user._id
  // let comment = await Comment.create(req.body)
  // res.json(comment)
  res.json(req.user._id);
};

exports.store = store;

const update = (req, res) => {};

exports.update = update;

const destroy = (req, res) => {};

exports.destroy = destroy;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _mongoose = require("mongoose");

const SchemaDefinition = new _mongoose.Schema({
  body: {
    type: String,
    trim: true,
    required: [true, 'Comment body is required']
  },
  isAnonymous: {
    type: Boolean,
    default: false
  },
  article: {
    type: _mongoose.Schema.ObjectId,
    ref: 'Article',
    required: [true, 'Article id is required']
  },
  author: {
    type: _mongoose.Schema.ObjectId,
    ref: 'User',
    required: [true, 'User id is required']
  }
}, {
  toJSON: {
    virtuals: true
  },
  toObject: {
    virtuals: true
  },
  timestamps: true
});

var _default = (0, _mongoose.model)('Comment', SchemaDefinition);

exports.default = _default;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _express = require("express");

var _catchErrors = _interopRequireDefault(require("../../utils/catchErrors"));

var _isAuthenticated = _interopRequireDefault(require("../../middlewares/isAuthenticated"));

var _controller = require("./controller");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// import AppError from '$utils/AppError'
// import Article from './model'
const router = (0, _express.Router)();
router.route('/').post((0, _catchErrors.default)(_isAuthenticated.default), (0, _catchErrors.default)(_controller.store)); // router
//     .route('/:id')
//     .put(
//         catchErrors(isAuthenticated),
//         catchErrors(thisIsMyComment),
//         catchErrors(update)
//     )
//     .delete(
//         catchErrors(isAuthenticated),
//         catchErrors(thisIsMyComment),
//         catchErrors(destroy)
//     )

var _default = router;
exports.default = _default;
"use strict";
"use strict";
"use strict";
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updatePassword = exports.updateProfile = exports.logout = exports.users = exports.me = exports.login = exports.register = void 0;

var _joi = _interopRequireDefault(require("@hapi/joi"));

var _AppError = _interopRequireDefault(require("../../utils/AppError"));

var _model = _interopRequireDefault(require("./model"));

var _jsonwebtoken = _interopRequireDefault(require("jsonwebtoken"));

var _bcryptjs = require("bcryptjs");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const register = async (req, res) => {
  let user = await _model.default.create(req.body);
  res.json({
    message: 'সফল ভাবে Registration করেছেন। লগইন করার আগে আপনাকে অবশ্যই ইমেইল verify করতে হবে।',
    user
  });
};

exports.register = register;

const login = async (req, res) => {
  const schema = _joi.default.object().keys({
    user: _joi.default.string().required(),
    password: _joi.default.string().required()
  });

  await schema.validateAsync(req.body, {
    abortEarly: false
  });
  let user = await _model.default.findOne({
    $or: [{
      username: req.body.user
    }, {
      email: req.body.user
    }]
  });
  /**
   * When user not found
   */

  let invalidc = 'আজেবাজে কিছু না দিয়ে সঠিক তথ্য দিন 🤨 🤨 🤑';

  if (!user) {
    throw new _AppError.default(invalidc);
  }
  /**
   * When email is not varified
   */


  if (user.emailVerificationToken) {
    throw new _AppError.default('দয়া করে আপনার ইমেইল ভেরিফাই করুন');
  }
  /**
   * Finalllly generate cookie
   */


  let isMatched = await (0, _bcryptjs.compare)(req.body.password, user.password);

  if (isMatched) {
    let token = _jsonwebtoken.default.sign({
      userId: user.id
    }, process.env.APP_SECRET);

    res.cookie('token', token, {
      expires: new Date(Date.now() + 365 * 24 * 3600 * 1000),
      httpOnly: true
    });
    res.locals.user = user;
    res.json({
      message: 'ওয়াও 😱😱😱 , আপনি সফল ভাবে লগইন করে ফেলেছেন 🎉🙏',
      token
    });
  } else {
    res.status(400);
    throw new _AppError.default(invalidc);
  }

  res.json(user);
};

exports.login = login;

const me = async (req, res) => {
  let me = await _model.default.findOne({
    _id: req.user._id
  }).populate('articles');
  res.json(me);
};

exports.me = me;

const users = async (req, res) => {
  let users = await _model.default.find();
  res.json({
    users
  });
};

exports.users = users;

const logout = (req, res) => {
  res.clearCookie('token');
  res.json({
    message: 'সফল ভাবে লগআউট হয়েছে!!!'
  });
};

exports.logout = logout;

const updateProfile = async (req, res) => {
  const schema = _joi.default.object().keys({
    name: _joi.default.string(),
    username: _joi.default.string(),
    profilePhoto: _joi.default.string().uri(),
    bio: _joi.default.string().max(250),
    email: _joi.default.string().email()
  });

  await schema.validateAsync(req.body, {
    abortEarly: false
  });
  let user = await _model.default.findOneAndUpdate({
    _id: req.user._id
  }, req.body, {
    new: true
  });
  res.json({
    message: 'আপনার প্রোফাইলের তথ্য হালনাগাদ হয়েগেছে',
    user
  });
};

exports.updateProfile = updateProfile;

const updatePassword = async (req, res) => {
  const schema = _joi.default.object().keys({
    password: _joi.default.string().min(5).required(),
    confirm_password: _joi.default.any().valid(_joi.default.ref('password')).required()
  });

  await schema.validateAsync(req.body, {
    abortEarly: false
  });
  let password = await (0, _bcryptjs.hash)(req.body.password, 10);
  await _model.default.findByIdAndUpdate(req.user._id, {
    password
  }, {
    new: true
  });
  res.json({
    message: 'পাসওয়ার্ড পরিবর্তন হয়েছে'
  });
};

exports.updatePassword = updatePassword;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _mongoose = require("mongoose");

var _bcryptjs = require("bcryptjs");

var _uuid = require("uuid");

var _mongooseUniqueValidator = _interopRequireDefault(require("mongoose-unique-validator"));

var _validator = _interopRequireDefault(require("validator"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const SchemaDefinition = new _mongoose.Schema({
  name: {
    type: String,
    trim: true,
    required: [true, 'Name is required']
  },
  username: {
    type: String,
    unique: [true, 'Username already taken'],
    trim: true,
    lowercase: true
  },
  email: {
    type: String,
    unique: [true, 'Email already taken'],
    trim: true,
    lowercase: true,
    validate: [{
      validator: _validator.default.isEmail,
      message: 'Email is not valid'
    }]
  },
  bio: String,
  profilePhoto: {
    type: String,
    trim: true,
    validate: [_validator.default.isURL, 'Invalid url']
  },
  password: {
    type: String,
    required: [true, 'Password is required']
  },
  confirm_password: {
    type: String,
    required: [true, 'Password Confirmation is required'],
    validate: {
      validator: function (confirm_password) {
        return confirm_password === this.password;
      },
      message: 'Password did not matched'
    }
  },
  passwordResetToken: String,
  emailVerificationToken: String,
  passwordResetExpires: Date
}, {
  toJSON: {
    virtuals: true
  },
  toObject: {
    virtuals: true
  }
});
SchemaDefinition.virtual('articles', {
  ref: 'Article',
  foreignField: 'author',
  localField: '_id'
});
SchemaDefinition.pre('save', async function (next) {
  this.password = await (0, _bcryptjs.hash)(this.password, 10);
  /**
   * Email verification
   */

  let token = (0, _uuid.v4)();
  this.emailVerificationToken = token; // let url = `${process.env.APP_URL}/auth/email-verify/${token}`
  // let email = new Email(user, url)
  // email.send('welcome', 'Welcome to TechDiary.blog')

  this.confirm_password = undefined;
  next();
});
SchemaDefinition.plugin(_mongooseUniqueValidator.default, {
  message: '{PATH} already taken'
});

var _default = (0, _mongoose.model)('User', SchemaDefinition);

exports.default = _default;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _express = require("express");

var _catchErrors = _interopRequireDefault(require("../../utils/catchErrors"));

var _isAuthenticated = _interopRequireDefault(require("../../middlewares/isAuthenticated"));

var _controller = require("./controller");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const router = (0, _express.Router)();
router.post('/login', (0, _catchErrors.default)(_controller.login));
router.post('/register', (0, _catchErrors.default)(_controller.register));
router.post('/update-profile', (0, _catchErrors.default)(_isAuthenticated.default), (0, _catchErrors.default)(_controller.updateProfile));
router.post('/update-password', (0, _catchErrors.default)(_isAuthenticated.default), (0, _catchErrors.default)(_controller.updatePassword));
router.get('/me', (0, _catchErrors.default)(_isAuthenticated.default), (0, _catchErrors.default)(_controller.me));
router.get('/users', (0, _catchErrors.default)(_controller.users));
router.post('/logout', (0, _catchErrors.default)(_isAuthenticated.default), _controller.logout); // router.post('/password-recovery-request')

var _default = router;
exports.default = _default;
"use strict";
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _express = _interopRequireDefault(require("express"));

var _route = _interopRequireDefault(require("./User/route"));

var _route2 = _interopRequireDefault(require("./Article/route"));

var _route3 = _interopRequireDefault(require("./Comment/route"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const router = _express.default.Router();

router.use('/users', _route.default);
router.use('/articles', _route2.default);
router.use('/comments', _route3.default);
var _default = router;
exports.default = _default;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _express = _interopRequireDefault(require("express"));

var _cors = _interopRequireDefault(require("cors"));

var _cookieParser = _interopRequireDefault(require("cookie-parser"));

var _morgan = _interopRequireDefault(require("morgan"));

var _catchGlobalError = _interopRequireDefault(require("./utils/catchGlobalError"));

var _api = _interopRequireDefault(require("./api"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * V1
 */

/**
 * Initialize Express application
 */
const app = (0, _express.default)();
/**
 * Enable cors
 */

app.use((0, _cors.default)());
app.use((0, _cookieParser.default)(process.env.APP_SECRET));
/**
 * Express Logger
 */

if (process.env.NODE_ENV === 'development') app.use((0, _morgan.default)('dev'));
/**
 * Parse request Body
 */

app.use(_express.default.urlencoded({
  extended: true
}));
app.use(_express.default.json());
/**
 * Apis
 */
// app.get('/status', (req, res) => {
//     res.json({
//         status: '🔥 🔥 Server is working 🔥 🔥',
//         NODE_ENV: process.env.NODE_ENV,
//         database: {
//             dbUrl: process.env.DATABASE_URL,
//             ssl: process.env.DB_SSL,
//         },
//     })
// })

app.use('/api/v1', _api.default); // Fallback router

app.all('*', (_, res) => {
  res.status(404).json({
    message: 'Invalid api route'
  });
});
app.use(_catchGlobalError.default);
var _default = app;
exports.default = _default;
"use strict";

var _mongoose = _interopRequireDefault(require("mongoose"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_mongoose.default.connect(process.env.DATABASE_URL, {
  useNewUrlParser: true,
  useUnifiedTopology: true
});

_mongoose.default.Promise = global.Promise; // Tell Mongoose to use ES6 promises

_mongoose.default.connection.on('error', err => {
  console.error(`🙅 🚫 🙅 🚫 → ${err.message}`);
});

_mongoose.default.connection.on('connected', () => {
  console.log(`Database connected`);
});
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _jsonwebtoken = _interopRequireDefault(require("jsonwebtoken"));

var _AppError = _interopRequireDefault(require("../utils/AppError"));

var _model = _interopRequireDefault(require("../api/User/model"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const isAuthenticated = async (req, res, next) => {
  let token = req.cookies.token;

  if (!token) {
    throw new _AppError.default('Token not provided', 403);
  } else {
    let {
      userId
    } = _jsonwebtoken.default.verify(token, process.env.APP_SECRET);

    const user = await _model.default.findOne({
      _id: userId
    });
    req.user = user;
    next();
  }
};

var _default = isAuthenticated;
exports.default = _default;
"use strict";

var _app = _interopRequireDefault(require("./app.js"));

require("./dbConnection");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const port = process.env.PORT || 3000;

_app.default.listen(port, () => {
  console.log(`Server working at http://localhost:${port}`);
});
"use strict";

const errorTypes = require("./errorTypes");
/**
 * AppError Class for throwing app custom error
 */


class AppError extends Error {
  /**
   * @param {string} msg - Error Message
   * @param {number} statusCode - Error status code 4xx
   * @param {errorTypes} type - Error type enum
   * @param {{}} errors - error object
   *
   * @returns @void
   */
  constructor(msg, statusCode = 400, type = 'AppError') {
    super();
    this.name = type;
    this.message = msg;
    this.statusCode = statusCode;
  }

}

module.exports = AppError;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

const catchErrors = fn => {
  return function (req, res, next) {
    return fn(req, res, next).catch(next);
  };
};

var _default = catchErrors;
exports.default = _default;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _errorMsg = _interopRequireDefault(require("./errorMsg"));

var _formatMongooseValidationErrors = _interopRequireDefault(require("./formatters/formatMongooseValidationErrors"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = (error, req, res, next) => {
  /**
   * -----------------------------------------------------------------
   *      Catch Validation Errors
   * -----------------------------------------------------------------
   */
  // error thrown by AppError
  if (error.name === 'AppError') {
    res.status(error.statusCode).json((0, _errorMsg.default)({
      type: error.name,
      message: error.message,
      statusCode: error === null || error === void 0 ? void 0 : error.statusCode,
      stack: process.env.NODE_ENV === 'dev' ? error.stack : undefined
    }));
  }

  if (error.name === 'ValidationError') {
    let errors = (0, _formatMongooseValidationErrors.default)(error.errors);
    res.status(400).json((0, _errorMsg.default)({
      errors,
      type: error.name,
      message: 'You have some validation error',
      stack: process.env.NODE_ENV === 'dev' ? error.stack : undefined
    }));
  }
  /**
   * -----------------------------------------------------------------
   *      Internal server Errors
   * -----------------------------------------------------------------
   */
  // res.status(error.statusCode || 500).json(
  //     errorMsg({
  //         type: error.name,
  //         message: error.message,
  //         errors: error?.errors,
  //         stack: process.env.NODE_ENV === 'dev' ? error?.stack : undefined,
  //     })
  // )

};

exports.default = _default;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/**
 *
 * @param {*} type
 * @param {*} statusCode
 * @param {*} errors
 * @param {*} message
 * @param {*} stack
 */
const errorMsg = ({
  type,
  statusCode = 400,
  errors,
  message,
  stack
}) => ({
  type,
  statusCode,
  message,
  errors,
  stack
});

var _default = errorMsg;
exports.default = _default;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/**
 * @enum {string} - All error types
 */
const errorTypes = {
  UNAUTHORIZED: 'UNAUTHORIZED',
  JWT_TOKEN: 'JWT_TOKEN',
  UNCONTROLLED_ERROR: 'UNCONTROLLED_ERROR',
  VALIDATION_ERROR: 'VALIDATION_ERROR',
  INVALID_CREDENTIAL: 'INVALID_CREDENTIAL',
  INTERNAL_SERVER_ERROR: 'INTERNAL_SERVER_ERROR'
};
var _default = errorTypes;
exports.default = _default;
"use strict";

/**
 * ----------------------------------------------------------------
 * Format Errors
 * ----------------------------------------------------------------
 */
const formatDBValidationErrors = err => {
  let errors = err.errors;
  let errorJson = {};

  if (errors) {
    errors.map(({
      message,
      path
    }) => {
      errorJson[path] = message;
    });
  }

  return errorJson;
};

module.exports = formatDBValidationErrors;
"use strict";

const formatJoiErrors = err => {
  let errors = {};
  err.details.forEach(e => {
    errors[e.path[0]] = e.message;
  });
  return errors;
};

module.exports = formatJoiErrors;
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

const formatMongooseValidationErrors = errors => {
  let errorsObj = {};
  Object.keys(errors).forEach(key => errorsObj[key] = errors[key].message);
  return errorsObj;
};

var _default = formatMongooseValidationErrors;
exports.default = _default;
