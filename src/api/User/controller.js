import Joi from '@hapi/joi'
import AppError from '$utils/AppError'

import jwt from 'jsonwebtoken'
import { compare, hash } from 'bcryptjs'
import catchErrors from '$utils/catchErrors'

import User from './model'

const register = catchErrors(async (req, res) => {
    let user = await User.create(req.body)
    res.json({
        message:
            '‡¶∏‡¶´‡¶≤ ‡¶≠‡¶æ‡¶¨‡ßá Registration ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§ ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ verify ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§',
        user,
    })
})

const login = catchErrors(async (req, res) => {
    const schema = Joi.object().keys({
        user: Joi.string().required(),
        password: Joi.string().required(),
    })
    await schema.validateAsync(req.body, { abortEarly: false })

    let user = await User.findOne({
        $or: [{ username: req.body.user }, { email: req.body.user }],
    })

    /**
     * When user not found
     */
    let invalidc = '‡¶Ü‡¶ú‡ßá‡¶¨‡¶æ‡¶ú‡ßá ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶®‡¶æ ‡¶¶‡¶ø‡ßü‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶§‡¶•‡ßç‡¶Ø ‡¶¶‡¶ø‡¶® ü§® ü§® ü§ë'

    if (!user) {
        throw new AppError(invalidc)
    }

    /**
     * When email is not varified
     */

    if (user.emailVerificationToken) {
        throw new AppError('‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶á‡¶Æ‡ßá‡¶á‡¶≤ ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶®')
    }

    /**
     * Finalllly generate cookie
     */

    let isMatched = await compare(req.body.password, user.password)

    if (isMatched) {
        let token = jwt.sign({ userId: user.id }, process.env.APP_SECRET)
        res.cookie('token', token, {
            expires: new Date(Date.now() + 365 * 24 * 3600 * 1000),
            httpOnly: true,
        })

        res.locals.user = user
        res.json({
            message: '‡¶ì‡ßü‡¶æ‡¶ì üò±üò±üò± , ‡¶Ü‡¶™‡¶®‡¶ø ‡¶∏‡¶´‡¶≤ ‡¶≠‡¶æ‡¶¨‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßá ‡¶´‡ßá‡¶≤‡ßá‡¶õ‡ßá‡¶® üéâüôè',
            token,
        })
    } else {
        res.status(400)
        throw new AppError(invalidc)
    }

    res.json(user)
})

const me = catchErrors(async (req, res) => {
    let me = await User.findOne({ _id: req.user._id }).populate('articles')
    res.json(me)
})

const users = catchErrors(async (req, res) => {
    let users = await User.find()
    res.json({
        users,
    })
})

const logout = (req, res) => {
    res.clearCookie('token')
    res.json({
        message: '‡¶∏‡¶´‡¶≤ ‡¶≠‡¶æ‡¶¨‡ßá ‡¶≤‡¶ó‡¶Ü‡¶â‡¶ü ‡¶π‡ßü‡ßá‡¶õ‡ßá!!!',
    })
}

const updateProfile = catchErrors(async (req, res) => {
    const schema = Joi.object().keys({
        name: Joi.string(),
        username: Joi.string(),
        profilePhoto: Joi.string().uri(),
        bio: Joi.string().max(250),
        email: Joi.string().email(),
    })
    await schema.validateAsync(req.body, { abortEarly: false })

    let user = await User.findOneAndUpdate({ _id: req.user._id }, req.body, {
        new: true,
    })
    res.json({
        message: '‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶π‡¶æ‡¶≤‡¶®‡¶æ‡¶ó‡¶æ‡¶¶ ‡¶π‡ßü‡ßá‡¶ó‡ßá‡¶õ‡ßá',
        user,
    })
})

const updatePassword = async (req, res) => {
    const schema = Joi.object().keys({
        password: Joi.string()
            .min(5)
            .required(),
        confirm_password: Joi.any()
            .valid(Joi.ref('password'))
            .required(),
    })
    await schema.validateAsync(req.body, { abortEarly: false })

    let password = await hash(req.body.password, 10)

    await User.findByIdAndUpdate(req.user._id, { password }, { new: true })

    res.json({
        message: '‡¶™‡¶æ‡¶∏‡¶ì‡ßü‡¶æ‡¶∞‡ßç‡¶° ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶π‡ßü‡ßá‡¶õ‡ßá',
    })
}

export { register, login, me, users, logout, updateProfile, updatePassword }
